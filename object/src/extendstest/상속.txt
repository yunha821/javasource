- 클래스 상속
기본의 클래스를 재사용하여 새로운 클래스 작성
코드의 재사용성 높아지고, 중복을 제거할 수 있다.

- 상속이 되는 것들
1) 멤버 상속
2) 메소드 상속

- 상속되지 않는 것들
생성자와 초기화 블럭은 상속되지 않음

- 자손 클래스의 멤버 개수는 조상 클래스보다 항상 많거나 같다

- 단일 상속만 가능
class A extends B{}

조상 클래스 : 부모, 상위(super), 기반(base) 클래스
자손 클래스 : 자식, 하위(sub), 파생된(derived) 클래스

- 클래스간의 관계
1) 상속관계(is a) 
2) 포함관계(has a)  

원은 점이다.(is a) : Circle extends Point
원은 점을 가지고 있다. (has a)
class Circle{
    Point p = new Point()
}

원은 도형이다 => OK(상속관계)

오버로딩 : 하나의 클래스에 생성자가 여러 개 존재하거나, 메소드가 여러 개 존재
오버라이딩 : 상속 관계에서 나옴 
            @Override 어노테이션 사용
            자식 클래스에서 부모 클래스의 메소드를 재정의 하는 것

모든 클래스의 조상 : Object
- 모든 클래스의 상속 계층도의 최상위에 위치
- 자동으로 상속받는다
- toString(), equals().... 자동으로 상속됨

8/29
추상(abstract) 클래스
- 클래스 : 완성 설계도
- 추상 클래스 : 미완성 설계도(메소드를 추상으로 처리)
멤버 변수, 일반 메소드 선언 가능


추상(abstract) 메소드 : 어떤 기능을 수행할 목적으로 작성된 것인지에 대한 정보만 제공
abstract void method1();
하위 클래스에서 반드시 매소드를 구현해야 함

추상 : 개별의 구체적 표상이나 개념에서 공통의 성질을 뽑아 일반적인 개념으로 파악
추상화 : 클래스 간의 공통점을 찾아내서 공통의 조상을 만드는 작업
구체화 : 상속을 통해 클래스를 구현, 확장하는 작업